import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/providers/theme-provider";
import { ClerkProvider } from "@clerk/nextjs";
import { ModalProvider } from "@/providers/modal-provider";
import { ReactQueryProvider } from "@/providers/react-query-provider";
import { Toaster } from "@/components/ui/sonner";
import { LandingModalProvider } from "@/providers/landing-modal-provider";
import { PerformanceProvider } from "@/providers/performance/performance-provider";
import { PerformancePanel } from "@/components/performance/performance-dashboard";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="en" suppressHydrationWarning>
            <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
                <ReactQueryProvider>
                    <ClerkProvider>
                        <ThemeProvider attribute="class" defaultTheme="dark" enableSystem disableTransitionOnChange>
                            <ModalProvider>
                                <LandingModalProvider>
                                    <PerformanceProvider>
                                        {children}
                                        {process.env.NODE_ENV === "development" && <PerformancePanel />}
                                    </PerformanceProvider>
                                </LandingModalProvider>
                            </ModalProvider>
                        </ThemeProvider>
                        <Toaster richColors />
                    </ClerkProvider>
                </ReactQueryProvider>
            </body>
        </html>
    );
}
