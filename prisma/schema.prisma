generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstname     String
  lastname      String
  clerkId       String   @unique
  image         String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  sites         Site[]
  media         Media[]
  domains       Domain[]
  overlays      Overlay[]    
  liveStreamCards LiveStreamCard[]

  @@map("User")
}

model Site {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  isPublished Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages       Page[]
  media       Media[]
  domains     Domain[]
  settings    SiteSettings?

  @@index([userId])
  @@map("Site")
}

model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String
  content   Json?
  isHome    Boolean  @default(false)
  seo       Json?
  siteId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, slug])
  @@index([siteId])
  @@map("Page")
}

model Overlay {
  id        String   @id @default(cuid())
  name      String
  content   Json?
  isEnabled Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Overlay") 
}

model LiveStreamCard {
  id        String   @id @default(cuid())
  name      String
  content   Json?
  isEnabled Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("LiveStreamCard")
}

model SiteSettings {
  id                  String   @id @default(cuid())
  siteId              String   @unique
  enableOverlay       Boolean  @default(false)  
  selectedOverlayId   String?                   
  selectedCardId      String?
  liveStreamLink      String?
  title               String?
  favicon             String?
  googleAnalyticsId   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  site                Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
  @@map("SiteSettings")
}

model Media {
  id        String    @id @default(cuid())
  name      String
  link      String
  type      MediaType
  alt       String?
  size      Int?
  mimeType  String?
  userId    String
  siteId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  site      Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([siteId])
  @@index([type])
  @@map("Media")
}

model Domain {
  id             String   @id @default(cuid())
  name           String   @unique
  userId         String
  siteId         String
  verificationId String   @unique
  isVerified     Boolean  @default(false)
  sslStatus      String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  site           Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([siteId])
  @@map("Domain")
}