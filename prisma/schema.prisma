// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

model User {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstname    String
  lastname     String
  email        String
  clerkId      String       @unique
  image        String?
  role         UserRole     @default(USER)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  sites        Site[]       // All sites created by the user
  domains      Domain[]     // All domains added by the user
  landingModals LandingModal[] // User's landing modals
  media        Media[]      // User's media files
}

// Site created by the user
model Site {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String       // Site name
  description   String?      // Description
  isPublished   Boolean      @default(false)
  favIcon       String?      // Site favicon
  isDefault     Boolean      @default(false)  // Is this the user's default site?
  
  // User relation
  userId        String       @db.Uuid
  user          User         @relation(fields: [userId], references: [id])
  
  // Relations
  pages         Page[]       // Site pages
  domains       Domain[]     // Domains connected to this site
  settings      SiteSettings? // Site settings
  media         Media[]      // Site-specific media files
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([userId])
}

// Each page of the site
model Page {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    // Page title
  slug        String    // URL slug (e.g., about-us, contact)
  isHome      Boolean   @default(false) // Is this the homepage?
  content     Json      // Page content in JSON format (site builder data)
  seo         Json?     // SEO metadata (title, description, keywords)
  
  // Site relation
  siteId      String    @db.Uuid
  site        Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([siteId, slug]) // Two identical slugs cannot exist on the same site
  @@index([siteId])
}

// Domain model
model Domain {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String    @unique // E.g., "example.com"
  
  // User relation
  userId         String    @db.Uuid
  user           User      @relation(fields: [userId], references: [id])
  
  // Site relation (can be null - domain not yet connected to a site)
  siteId         String?   @db.Uuid
  site           Site?     @relation(fields: [siteId], references: [id])
  
  // Domain status
  isVerified     Boolean   @default(false)
  verificationId String    @unique // TXT record for DNS verification
  sslStatus      String    @default("pending") // "pending", "active", "error"
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@index([userId])
  @@index([siteId])
}

// Landing Modal model
model LandingModal {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    // Modal name
  content     Json      // Modal content in JSON format (site builder data)
  isEnabled   Boolean   @default(true)
  
  // User relation
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
}

// Site Settings model for landing modal configuration
model SiteSettings {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  // Site relation
  siteId          String    @db.Uuid @unique
  site            Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  // Landing modal settings
  enableLandingModal Boolean @default(false)
  selectedModalId    String? @db.Uuid
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([siteId])
}

model Media {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        MediaType // Media type enum
  name        String    // Original filename or display name
  link        String    @unique // URL or path to the media file
  alt         String?   // Alt text for accessibility
  size        Int?      // File size in bytes
  mimeType    String?   // MIME type (image/jpeg, video/mp4, etc.)
  
  // User relation (owner of the media)
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Site relation (optional - media can be site-specific or global to user)
  siteId      String?   @db.Uuid
  site        Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
  @@index([siteId])
  @@index([type])
}